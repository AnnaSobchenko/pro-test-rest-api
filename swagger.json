{
  "openapi": "3.0.1",
  "info": {
    "title": "Pro Test API docs",
    "description": "API documentation for GoIT project 'PRO-TEST'. [Backend github repository](https://github.com/AnnaSobchenko/pro-test-rest-api)"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://pro-test-rest-api.herokuapp.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Contacts",
      "description": "Contacts of the development team"
    },
    {
      "name": "QA-tests",
      "description": "QA-test endpoints"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Current user",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh Token",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/test/{type}": {
      "get": {
        "tags": ["QA-tests"],
        "summary": "Get QA test questions",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Testing type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QATestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no token provided)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    },
    "/test/check/{type}": {
      "post": {
        "tags": ["QA-tests"],
        "summary": "Get QA test result",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Testing type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QATestResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no token provided)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Contacts of the development team",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no token provided)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    },
    "/contacts/{name}": {
      "get": {
        "tags": ["Contacts"],
        "summary": "Contact information of the developer",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Contact's name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactNameResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no token provided)",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user123@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "user123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user123@mail.com"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjliNmEzMmUzM2Q1YzBjM2Y0MjNhY2UiLCJpYXQiOjE2NTQ2NzA4MjIsImV4cCI6MTY1NDY3NDQyMn0.qYMcQgrq_gg19rttwCHXLT2NHr0wJAjjYmWPMZXy1fw"
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user123@mail.com"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "user123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user123@mail.com"
              }
            }
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjliNmEzMmUzM2Q1YzBjM2Y0MjNhY2UiLCJpYXQiOjE2NTQ2NzA4MjIsImV4cCI6MTY1NDY3NDQyMn0.qYMcQgrq_gg19rttwCHXLT2NHr0wJAjjYmWPMZXy1fw"
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user123@mail.com"
          }
        }
      },
      "RefreshTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjliNmEzMmUzM2Q1YzBjM2Y0MjNhY2UiLCJpYXQiOjE2NTQ2NzA4MjIsImV4cCI6MTY1NDY3NDQyMn0.qYMcQgrq_gg19rttwCHXLT2NHr0wJAjjYmWPMZXy1fw"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refreshToken",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MjliNzY1MGQ5NWJjOWQ5ZDdjNGRkZjgiLCJpYXQiOjE2NTQzNTU3MTIsImV4cCI6MTY1NDM1OTMxMn0.RWeRPi75Hl0kqsyPMEMbEBzXlu8jIVtXDXG84PijOJM"
          }
        }
      },
      "QATestResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "question": {
              "type": "string",
              "description": "A question",
              "example": "Interface testing checks the interaction of individual modules. Most often used to test the user interface of GUI applications"
            },
            "_id": {
              "type": "string",
              "description": "Question's id",
              "example": "629d17151ca8c1a61c52a5c9"
            },
            "answers": {
              "type": "array",
              "description": "Answers to the question",
              "items": {
                "type": "string",
                "description": "variant for right answer",
                "example": "Currency testing"
              }
            }
          }
        },
        "example": [
          {
            "_id": "629d17151ca8c1a61c52a5d3",
            "question": "navigate().to(). This navigation command in Selenium:",
            "answers": [
              "Returns the user to the previous page from the browser history",
              "Allows the user to navigate to the next page according to the browser history",
              "Used to refresh the browser page",
              "Allows the user to open a new window in the browser and follow the specified URL",
              "There is no such command"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5e6",
            "question": "Is a testing technique that involves testing with different ranges of valid and invalid inputs a specific module or component functionality?",
            "answers": [
              "Baseline testing",
              "Gorilla Testing",
              "Monkey testing",
              "Agile testing",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5d4",
            "question": "Which of the following is a bug report attribute",
            "answers": [
              "Summary",
              "Attachments",
              "Status",
              "Severity",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5de",
            "question": "Which of the following is not part of specification-based testing?",
            "answers": [
              "State transition",
              "Decision table",
              "Boundary value analysis",
              "Data stream",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5cf",
            "question": "Most often, viewing items in the Google Chrome browser on Mac is launched by this key combination",
            "answers": [
              "Cmd+Opt+O",
              "Cmd+Opt+R",
              "Cmd+Opt+J",
              "Cmd+Opt+N",
              "Cmd+Opt+W"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5dc",
            "question": "What kind of testing allows a tester to evaluate the software's behavior when exceptions are thrown?",
            "answers": [
              "Injection test malfunction",
              "Passive testing",
              "Fuzzy testing",
              "Centiliter",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5c9",
            "question": "What does 'CI' stands for in QA?",
            "answers": [
              "Connection interface",
              "Nothing",
              "Continuous Integration",
              "Centiliter"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5df",
            "question": "What is the order of priority testing?",
            "answers": [
              "System >> Reception >> Integration",
              "System >> Integration >> Acceptance Testing",
              "Module >> Integration >> System testing",
              "Module >> System >> Acceptance test",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5d8",
            "question": "The tester runs a test to evaluate whether it meets the user's request to fill in a specific field using a drop-down list containing a list of values. The tester performs",
            "answers": [
              "Stress testing",
              "Regression testing",
              "White box testing",
              "Black box testing",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5d9",
            "question": "Checking the onBlur field is done",
            "answers": [
              "When we hover over the field",
              "When we start entering data",
              "When we press the submit button",
              "After entering data",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5e0",
            "question": "Application does not allow the configuration expected by the client, is an example",
            "answers": [
              "High severity and high priority",
              "High severity and low priority",
              "Low Severity and Low Priority",
              "Low Severity and High Priority",
              "All options are correct",
              "All options are incorrent"
            ]
          },
          {
            "_id": "629d17151ca8c1a61c52a5e1",
            "question": "What is the balance of effort required to fix a defect in the requirements phase, design phase, coding phase, and implementation phase?",
            "answers": [
              "1: 8: 12: 100",
              "1: 4: 7: 10",
              "1: 10: 100: 1000",
              "1: 6: 10: 1000",
              "All options are correct",
              "All options are incorrent"
            ]
          }
        ]
      },
      "QATestResultRequest": {
        "required": ["answers"],
        "description": "Answers to the question",
        "type": "object",
        "properties": {
          "answers": {
            "required": ["userAnswer", "questionId"],
            "type": "object",

            "properties": {
              "userAnswer": {
                "type": "string",
                "description": "User's answer",
                "example": "Verification of software, according to the test plan, test procedures and relevant documentation, taking into account the wishes of the client"
              },
              "questionId": {
                "type": "string",
                "description": "Question's id",
                "example": "629d17151ca8c1a61c52a5c9"
              }
            }
          }
        }
      },
      "QATestResultResponse": {
        "type": "object",
        "properties": {
          "rightAnswers": {
            "type": "integer",
            "description": "Quantity true answers",
            "example": "12"
          }
        },
        "example": { "rightAnswers": 12 }
      },
      "ContactsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Contact's id"
            },
            "name": {
              "type": "string",
              "description": "Contact's name"
            },
            "job_title": {
              "type": "string",
              "description": "Contact's team position"
            },
            "comment": {
              "type": "string",
              "description": "Comment"
            },
            "avatar": {
              "type": "string",
              "description": "avatar file's name"
            },
            "links": {
              "description": "Contact's links",
              "type": "object",
              "properties": {
                "github": {
                  "type": "string",
                  "description": "Contact's link to GitHub"
                },
                "linkedin": {
                  "type": "string",
                  "description": "Contact's link to LinkedIn"
                },
                "resume": {
                  "type": "string",
                  "description": "Link to download resume"
                }
              }
            }
          }
        },
        "example": [
          {
            "_id": "62a06232c8899933cfbf4719",
            "name": "Anna Sobchenko",
            "job_title": "Team Lead",
            "comment": "Your future is created what you do today not tomorrow.",
            "avatar": "anna_sobchenko.jpg",
            "links": {
              "github": "https://github.com/AnnaSobchenko",
              "linkedin": "https://www.linkedin.com/in/hanna-sobchenko/",
              "resume": "anna_sobchenko.pdf"
            }
          },
          {
            "_id": "62a06232c8899933cfbf4718",
            "name": "Roman Zeno",
            "job_title": "Scrum master",
            "comment": "The complexity of the program grows until it exceeds the ability of the programmer.",
            "avatar": "roman_zeno.jpg",
            "links": {
              "github": "https://github.com/zenya385",
              "linkedin": "https://www.linkedin.com/in/roman-zeno/",
              "resume": "roman_zeno.pdf"
            }
          },
          {
            "_id": "62a06232c8899933cfbf471e",
            "name": "Yurii Ivashchenko",
            "job_title": "Full Stack Developer",
            "comment": "You can be better than you were in the past.",
            "avatar": "yurii_ivashchenko.jpg",
            "links": {
              "github": "https://github.com/YuriiIva",
              "linkedin": "",
              "resume": ""
            }
          },
          {
            "_id": "62a4a79497d3b38e3a98429d",
            "name": "Vladyslav Filin",
            "job_title": "Full Stack Developer",
            "comment": "There is no nature in man, because there is no ugliness in nature ...",
            "avatar": "vlad_filin.jpg",
            "links": {
              "github": "https://github.com/Kinoha12345",
              "linkedin": "",
              "resume": ""
            }
          },
          {
            "_id": "62a4a79497d3b38e3a98429e",
            "name": "Andrii Vinnykov",
            "job_title": "Full Stack Developer",
            "comment": "'Success is the ability to go from one failure to another with no loss of enthusiasm.'  Winston Churchill.",
            "avatar": "andrii_vinikov.jpg",
            "links": {
              "github": "https://github.com/AndriiVV",
              "linkedin": "",
              "resume": ""
            }
          },
          {
            "_id": "62a4a79497d3b38e3a98429f",
            "name": "Ivan Loboda",
            "job_title": "Full Stack Developer",
            "comment": "♂BOSS OF THIS GYM♂",
            "avatar": "ivan_loboda.JPG",
            "links": {
              "github": "https://github.com/Ivan-Loboda",
              "linkedin": "https://www.linkedin.com/in/ivan-loboda/",
              "resume": "ivan_loboda.pdf"
            }
          },
          {
            "_id": "62a4a79497d3b38e3a9842a0",
            "name": "Maksym Parunov",
            "job_title": "Full Stack Developer",
            "comment": "Work it, Make it, Do itMakes us Harder, Better, Faster, Stronger.",
            "avatar": "max_parunov.jpg",
            "links": {
              "github": "https://github.com/MaksVibe",
              "linkedin": "https://www.linkedin.com/in/maksym-parunov",
              "resume": ""
            }
          },
          {
            "_id": "62a4a79497d3b38e3a9842a1",
            "name": "Roman Havryliuk",
            "job_title": "Full Stack Developer",
            "comment": "Every program has two goals: what it should do and what it shouldn't.",
            "avatar": "roma_gavreluk.jpg",
            "links": {
              "github": "https://github.com/Gavru4",
              "linkedin": "https://www.linkedin.com/in/roman-havryliuk-5220a3235/",
              "resume": ""
            }
          },
          {
            "_id": "62a4a79497d3b38e3a9842a2",
            "name": "Tetiana Tarasovich",
            "job_title": "Full Stack Developer",
            "comment": "'Screw it, Let's Do It'",
            "avatar": "tatiana_tarasovich.jpg",
            "links": {
              "github": "https://github.com/Tate-T",
              "linkedin": "https://www.linkedin.com/in/tetiana-tarasovych/",
              "resume": ""
            }
          },
          {
            "_id": "62a4a79497d3b38e3a9842a4",
            "name": "Maksym Tuhanov",
            "job_title": "Full Stack Developer",
            "comment": "Lorem Ipsum has been the standard fish for Latin texts since the early 16th century.",
            "avatar": "maksym_tuhanov.jpg",
            "links": {
              "github": "https://github.com/Maxlemberg",
              "linkedin": "",
              "resume": ""
            }
          }
        ]
      },
      "ContactNameResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Contact's id"
          },
          "name": {
            "type": "string",
            "description": "Contact's name"
          },
          "job_title": {
            "type": "string",
            "description": "Contact's team position"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "avatar": {
            "type": "string",
            "description": "avatar file's name"
          },
          "links": {
            "description": "Contact's links",
            "type": "object",
            "properties": {
              "github": {
                "type": "string",
                "description": "Contact's link to GitHub"
              },
              "linkedin": {
                "type": "string",
                "description": "Contact's link to LinkedIn"
              },
              "resume": {
                "type": "string",
                "description": "Link to download resume"
              }
            }
          }
        },
        "example": {
          "_id": "62a06232c8899933cfbf4719",
          "name": "Anna Sobchenko",
          "job_title": "Team Lead",
          "comment": "Your future is created what you do today not tomorrow.",
          "avatar": "anna_sobchenko.jpg",
          "links": {
            "github": "https://github.com/AnnaSobchenko",
            "linkedin": "https://www.linkedin.com/in/hanna-sobchenko/",
            "resume": "anna_sobchenko.pdf"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
